{"version":3,"file":"static/js/884.def5fc65.chunk.js","mappings":"mPAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMC,EAAc,mCAAG,sGACLF,EAAAA,EAAAA,IAAU,sBADL,uBACpBG,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qDAKdC,EAAY,mCAAG,WAAMC,GAAN,yFACHL,EAAAA,EAAAA,IAAA,iBAAoBK,IADjB,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAc,mCAAG,WAAMC,GAAN,yFACLP,EAAAA,EAAAA,IAAA,gBAA2B,CAChDQ,OAAQ,CACND,MAAAA,KAHwB,uBACpBJ,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,qD,uGCsF3B,UA5FqB,WAAO,IAAD,QACzB,GAA0BM,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,YACRZ,EAAAA,EAAAA,IAAaQ,GACVK,MACC,YAQO,IAPLZ,EAOI,EAPJA,GACAa,EAMI,EANJA,YACAC,EAKI,EALJA,eACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACAC,EACI,EADJA,OAEAZ,EAAS,CACPN,GAAAA,EACAa,YAAAA,EACAC,eAAAA,EACAC,SAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,OAAAA,GAEH,IAEFC,OAAM,2EACV,GAAE,CAACZ,IAEJ,IAAMa,EAAQ,iBAAGX,QAAH,IAAGA,GAAH,UAAGA,EAAUY,aAAb,aAAG,EAAiBC,YAApB,QAA4B,IAGxCtB,EAOEK,EAPFL,GACAa,EAMER,EANFQ,YACAC,EAKET,EALFS,eACAC,EAIEV,EAJFU,SACAC,EAGEX,EAHFW,aACAC,EAEEZ,EAFFY,aACAC,EACEb,EADFa,OAGF,OACE,6BACE,SAAC,KAAD,CAAMK,GAAIH,EAAV,sBACA,4BACE,gBACEI,IACEX,EAAW,0CAC4BA,GAD5B,UAEJY,GAETC,IAAKZ,KAEP,4BACE,0BACGA,EADH,KACqB,IAAIa,KAAKX,GAAcY,cAD5C,QAGA,yCAAiBC,KAAKC,KAAoB,GAAfb,GAA3B,QACA,sCACA,uBAAIF,KACJ,oCACA,8BAAIG,QAAJ,IAAIA,OAAJ,EAAIA,EAAQa,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,SAC1C,2BACE,yBACE,SAAC,KAAD,CACEb,MAAO,CAAEC,KAAI,OAAEb,QAAF,IAAEA,GAAF,UAAEA,EAAUY,aAAZ,aAAE,EAAiBC,MAChCC,IAAIY,EAAAA,EAAAA,IAAa,OAAQ,CAAEnC,GAAAA,IAF7B,qBAOF,yBACE,SAAC,KAAD,CACEqB,MAAO,CAAEC,KAAI,OAAEb,QAAF,IAAEA,GAAF,UAAEA,EAAUY,aAAZ,aAAE,EAAiBC,MAChCC,IAAIY,EAAAA,EAAAA,IAAa,UAAW,CAAEnC,GAAAA,IAFhC,2BASJ,SAAC,EAAAoC,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,cAMX,C","sources":["movieAPI.js","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'c7881b8c7fb683724db136016dbb7912';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendMovies = async () => {\n  const { data } = await axios.get('trending/movie/day');\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieByName = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n","import { Suspense, useEffect, useState } from 'react';\nimport {\n  Link,\n  generatePath,\n  Outlet,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\nimport { getMovieById } from '../movieAPI';\nimport notFound from '../images/notFound.jpg';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    getMovieById(movieId)\n      .then(\n        ({\n          id,\n          poster_path,\n          original_title,\n          overview,\n          release_date,\n          vote_average,\n          genres,\n        }) => {\n          setMovie({\n            id,\n            poster_path,\n            original_title,\n            overview,\n            release_date,\n            vote_average,\n            genres,\n          });\n        }\n      )\n      .catch(() => `Whoops, something went wrong! Please try again later!`);\n  }, [movieId]);\n\n  const backLink = location?.state?.from ?? '/';\n\n  const {\n    id,\n    poster_path,\n    original_title,\n    overview,\n    release_date,\n    vote_average,\n    genres,\n  } = movie;\n\n  return (\n    <main>\n      <Link to={backLink}>Go back</Link>\n      <div>\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w342/${poster_path}`\n              : `${notFound}`\n          }\n          alt={original_title}\n        />\n        <div>\n          <h2>\n            {original_title} ({new Date(release_date).getFullYear()})\n          </h2>\n          <p>User scores: {Math.ceil(vote_average * 10)}%</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genres?.map(genre => genre.name).join(', ')}</p>\n          <ul>\n            <li>\n              <Link\n                state={{ from: location?.state?.from }}\n                to={generatePath('cast', { id })}\n              >\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link\n                state={{ from: location?.state?.from }}\n                to={generatePath('reviews', { id })}\n              >\n                Reviews\n              </Link>\n            </li>\n          </ul>\n\n          <Suspense fallback={<div>LOADING...</div>}>\n            <Outlet />\n          </Suspense>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["axios","api_key","getTrendMovies","data","getMovieById","id","getMovieByName","query","params","useState","movie","setMovie","movieId","useParams","location","useLocation","useEffect","then","poster_path","original_title","overview","release_date","vote_average","genres","catch","backLink","state","from","to","src","notFound","alt","Date","getFullYear","Math","ceil","map","genre","name","join","generatePath","Suspense","fallback"],"sourceRoot":""}