{"version":3,"file":"static/js/67.bd44c438.chunk.js","mappings":"kPAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMC,EAAc,mCAAG,sGACLF,EAAAA,EAAAA,IAAU,sBADL,uBACpBG,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qDAKdC,EAAY,mCAAG,WAAMC,GAAN,yFACHL,EAAAA,EAAAA,IAAA,iBAAoBK,IADjB,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAc,mCAAG,WAAMC,GAAN,yFACLP,EAAAA,EAAAA,IAAA,gBAA2B,CAChDQ,OAAQ,CACND,MAAAA,KAHwB,uBACpBJ,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,qD,0GCqB3B,EAnCkB,SAAC,GAAkB,IAAhBM,EAAe,EAAfA,SACnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOH,EAAP,KAAcI,EAAd,KAYA,OACE,kBACEF,SARiB,SAAAG,GACnBA,EAAEC,iBAEFJ,EAASF,GACTI,EAAS,GACV,EAIGG,MAAO,CAAEC,QAAS,OAAQC,IAAK,OAAQC,WAAY,QAFrD,WAIE,kBACEC,KAAK,OACLC,MAAOZ,EACPa,SAlBe,SAAAR,GACnB,IAAQO,EAAUP,EAAES,cAAZF,MACRR,EAASQ,EACV,EAgBKG,YAAY,sBAEd,mBAAQJ,KAAK,SAASJ,MAAO,CAAES,MAAO,OAAQC,OAAQ,QAAtD,sBAKL,E,mCCqBD,EA/Ce,WAAO,IAAD,EACnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,eAApB,QAA+B,GAC9C,GAA4BnB,EAAAA,EAAAA,UAAS,IAArC,eAAOoB,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,YACR5B,EAAAA,EAAAA,IAAesB,GACZO,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPL,GAAU,OAAIK,GACf,IACAC,OAAM,2EACV,GAAE,CAACT,IAQJ,OACE,6BACE,SAAC,EAAD,CAAWV,KAAK,OAAOT,SARF,SAAA6B,GAEvBX,EAD4B,KAATW,EAAc,CAAEA,KAAAA,GAAS,CAAC,GAE7CP,EAAU,GACX,KAKG,2BACGD,EAAOS,KAAI,gBAAGlC,EAAH,EAAGA,GAAImC,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,YAAvB,OACV,0BACE,UAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMX,GAAYY,GAAE,UAAKvC,GAAxC,WACE,gBACEwC,IACEJ,EAAW,0CAC4BA,GAD5B,UAEJK,GAETC,IAAKP,KAEP,wBAAKA,QAVCnC,EADA,KAeZ,SAAC,EAAA2C,SAAD,WACE,SAAC,KAAD,WAKT,C","sources":["movieAPI.js","components/Searchbar.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'c7881b8c7fb683724db136016dbb7912';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendMovies = async () => {\n  const { data } = await axios.get('trending/movie/day');\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieByName = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchBar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = e => {\n    const { value } = e.currentTarget;\n    setQuery(value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit(query);\n    setQuery('');\n  };\n  return (\n    <form\n      onSubmit={handleSubmit}\n      style={{ display: 'flex', gap: '20px', marginLeft: '20px' }}\n    >\n      <input\n        type=\"text\"\n        value={query}\n        onChange={handleChange}\n        placeholder=\"Search movies...\"\n      />\n      <button type=\"submit\" style={{ width: '60px', height: '20px' }}>\n        Search\n      </button>\n    </form>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import SearchBar from '../components/Searchbar';\nimport { getMovieByName } from '../movieAPI';\nimport { Link, Outlet, useLocation, useSearchParams } from 'react-router-dom';\nimport notFound from '../images/notFound.jpg';\nimport { Suspense, useEffect, useState } from 'react';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('name') ?? '';\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    getMovieByName(movieName)\n      .then(({ results }) => {\n        setMovies([...results]);\n      })\n      .catch(() => `Whoops, something went wrong! Please try again later!`);\n  }, [movieName]);\n\n  const handleFormSubmit = name => {\n    const nextParams = name !== '' ? { name } : {};\n    setSearchParams(nextParams);\n    setMovies([]);\n  };\n\n  return (\n    <main>\n      <SearchBar type=\"text\" onSubmit={handleFormSubmit} />\n      <div>\n        {movies.map(({ id, original_title, poster_path }) => (\n          <div key={id}>\n            <Link state={{ from: location }} to={`${id}`}>\n              <img\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w342/${poster_path}`\n                    : `${notFound}`\n                }\n                alt={original_title}\n              />\n              <h3>{original_title}</h3>\n            </Link>\n          </div>\n        ))}\n        <Suspense>\n          <Outlet />\n        </Suspense>\n      </div>\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","api_key","getTrendMovies","data","getMovieById","id","getMovieByName","query","params","onSubmit","useState","setQuery","e","preventDefault","style","display","gap","marginLeft","type","value","onChange","currentTarget","placeholder","width","height","useSearchParams","searchParams","setSearchParams","movieName","get","movies","setMovies","location","useLocation","useEffect","then","results","catch","name","map","original_title","poster_path","state","from","to","src","notFound","alt","Suspense"],"sourceRoot":""}